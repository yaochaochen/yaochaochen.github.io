<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>来自远方的程序猿</title>
  
  <subtitle>一起快乐入坑</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-26T05:52:19.048Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yaochaochen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hadoop搭建（单机）</title>
    <link href="http://yoursite.com/2019/06/26/Hadoop2.0X64%E4%BD%8D%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-2/"/>
    <id>http://yoursite.com/2019/06/26/Hadoop2.0X64位环境搭建-2/</id>
    <published>2019-06-26T05:52:19.052Z</published>
    <updated>2019-06-26T05:52:19.048Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop2-0X64位环境搭建"><a href="#Hadoop2-0X64位环境搭建" class="headerlink" title="Hadoop2.0X64位环境搭建"></a>Hadoop2.0X64位环境搭建</h1><h2 id="1、搭建环境"><a href="#1、搭建环境" class="headerlink" title="1、搭建环境"></a>1、搭建环境</h2><p>部署节点操作系统为CentOS，防火墙和SElinux禁用，创建了一个shiyanlou用户并在系统根目录下创建/app目录，用于存放Hadoop等组件运行包。因为该目录用于安装hadoop等组件程序，用户对hadoop必须赋予rwx权限（一般做法是root用户在根目录下创建/app目录，并修改该目录拥有者为shiyanlou(chown –R hadoop:hadoop /app）。</p><h3 id="Hadoop搭建环境"><a href="#Hadoop搭建环境" class="headerlink" title="Hadoop搭建环境"></a>Hadoop搭建环境</h3><p>虚拟机操作系统： CentOS7.5 64位<br>JDK：1.8.0_12 64位<br>Hadoop：2.2.0 64位</p><h2 id="2-部署Hadooop2-X"><a href="#2-部署Hadooop2-X" class="headerlink" title="2.部署Hadooop2.X"></a>2.部署Hadooop2.X</h2><h3 id="2-1配置Hadoop环境"><a href="#2-1配置Hadoop环境" class="headerlink" title="2.1配置Hadoop环境"></a>2.1配置Hadoop环境</h3><p>下载并解压hadoop安装包,解压缩并移动到/app目录下<br>`tar -xzf hadoop-2.2.0.tar.gz</p><p>mv hadoop-2.2.0 /app`</p><h3 id="2-2-在Hadoop目录下创建子目录"><a href="#2-2-在Hadoop目录下创建子目录" class="headerlink" title="2.2  在Hadoop目录下创建子目录"></a>2.2  在Hadoop目录下创建子目录</h3><p>在hadoop-2.2.0目录下创建tmp、name和data目录<br>cd /app/hadoop-2.2.0<br>mkdir tmp<br>mkdir hdfs<br>mkdir hdfs/name<br>mkdir hdfs/data</p><h3 id="2-3配置hadoop-env-sh"><a href="#2-3配置hadoop-env-sh" class="headerlink" title="2.3配置hadoop-env.sh"></a>2.3配置hadoop-env.sh</h3><ol><li>打开配置文件hadoop-env.sh</li></ol><p>cd /app/hadoop-2.2.0/etc/hadoop</p><p>sudo vi hadoop-env.sh</p><ol start="2"><li><p>加入配置内容，设置了hadoop中jdk和hadoop/bin路径<br>export HADOOP_CONF_DIR=/app/hadoop2.2.0/etc/hadoop<br>export JAVA_HOME=/app/lib/jdk1.8.0_12<br>export PATH=$PATH:/app/hadoop-2.2.0/bin</p></li><li><p>编译配置文件hadoop-env.sh，并确认生效<br>source hadoop-env.sh<br>hadoop version</p><h3 id="2-4配置yarn-env-sh"><a href="#2-4配置yarn-env-sh" class="headerlink" title="2.4配置yarn-env.sh"></a>2.4配置yarn-env.sh</h3><p>打开配置文件yarn-env.sh，设置了hadoop中jdk路径，配置完毕后使用source yarn-env.sh编译该文件<br>export JAVA_HOME=/app/lib/jdk1.8.0_12</p><h3 id="2-5配置core-site-xml"><a href="#2-5配置core-site-xml" class="headerlink" title="2.5配置core-site.xml"></a>2.5配置core-site.xml</h3></li><li><p>使用如下命令打开core-site.xml配置文件<br>cd /app/hadoop-2.2.0/etc/hadoop<br>sudo vi core-site.xml</p></li><li><p>在配置文件中，按照如下内容进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.default.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://hadoop:9000&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hdfs://hadoop:9000&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;io.file.buffer.size&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;131072&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;file:/app/hadoop-2.2.0/tmp&lt;/value&gt;</span><br><span class="line">    &lt;description&gt;Abase for other temporary directories.&lt;/description&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;hadoop.proxyuser.hduser.hosts&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">&lt;name&gt;hadoop.proxyuser.hduser.groups&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;*&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-6配置hdfs-site-xml"><a href="#2-6配置hdfs-site-xml" class="headerlink" title="2.6配置hdfs-site.xml"></a>2.6配置hdfs-site.xml</h3><ol><li>使用如下命令打开hdfs-site.xml配置文件<br>cd /app/hadoop-2.2.0/etc/hadoop<br>sudo vi hdfs-site.xml</li><li>在配置文件中，按照如下内容进行配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  &lt;property&gt;</span><br><span class="line">   &lt;name&gt;dfs.namenode.secondary.http-address&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;hadoop:9001&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">   &lt;name&gt;dfs.namenode.name.dir&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;file:/app/hadoop-2.2.0/hdfs/name&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">   &lt;name&gt;dfs.datanode.data.dir&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;file:/app/hadoop-2.2.0/hdfs/data&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">   &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">   &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line"></span><br><span class="line">   &lt;name&gt;dfs.webhdfs.enabled&lt;/name&gt;</span><br><span class="line"></span><br><span class="line">   &lt;value&gt;true&lt;/value&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="2-7-配置mapred-site-xml"><a href="#2-7-配置mapred-site-xml" class="headerlink" title="2.7 配置mapred-site.xml"></a>2.7 配置mapred-site.xml</h3><p>1.默认情况下不存在mapred-site.xml文件，可以从模板拷贝一份，并使用如下命令打开mapred-site.xml配置文件<br>cd /app/hadoop-2.2.0/etc/hadoop<br>cp mapred-site.xml.template mapred-site.xml<br>sudo vi mapred-site.xml<br>2.在配置文件中，按照如下内容进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop:10020&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop:19888&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="2-8-配置yarn-site-xml"><a href="#2-8-配置yarn-site-xml" class="headerlink" title="2.8 配置yarn-site.xml"></a>2.8 配置yarn-site.xml</h3><p>1.使用如下命令打开yarn-site.xml配置文件<br>cd /app/hadoop-2.2.0/etc/hadoop<br>sudo vi yarn-site.xml<br>2.在配置文件中，按照如下内容进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services.mapreduce.shuffle.class&lt;/name&gt;</span><br><span class="line">&lt;value&gt;org.apache.hadoop.mapred.ShuffleHandler&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop:8032&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop:8030&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop:8031&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop:8033&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">  &lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;hadoop:8088&lt;/value&gt;</span><br><span class="line">  &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="2-9配置slaves文件"><a href="#2-9配置slaves文件" class="headerlink" title="2.9配置slaves文件"></a>2.9配置slaves文件</h3><p>在slaves配置文件中设置从节点，这里设置为hadoop，与Hadoop1.X区别的是Hadoop2.X不需要设置Master<br>cd /app/hadoop-2.2.0/etc/hadoop<br>vi slaves</p><h3 id="2-10格式化namenode"><a href="#2-10格式化namenode" class="headerlink" title="2.10格式化namenode"></a>2.10格式化namenode</h3><p>cd /app/hadoop-2.2.0/bin<br>./hdfs namenode -format</p><h2 id="3启动Hadoop"><a href="#3启动Hadoop" class="headerlink" title="3启动Hadoop"></a>3启动Hadoop</h2><h3 id="3-1启动hdfs"><a href="#3-1启动hdfs" class="headerlink" title="3.1启动hdfs"></a>3.1启动hdfs</h3><p>cd /app/hadoop-2.2.0/sbin<br>./start-dfs.sh</p><h3 id="3-2-验证当前进行"><a href="#3-2-验证当前进行" class="headerlink" title="3.2 验证当前进行"></a>3.2 验证当前进行</h3><p>cd /app/hadoop-2.2.0/sbin<br>./start-yarn.sh</p><h3 id="3-3-验证当前进行"><a href="#3-3-验证当前进行" class="headerlink" title="3.3 验证当前进行"></a>3.3 验证当前进行</h3><p>使用jps命令查看运行进程，此时在hadoop上运行的进程除了：namenode、secondarynamenode和datanode，增加了resourcemanager和nodemanager两个进程</p><h2 id="4-测试Hadoop"><a href="#4-测试Hadoop" class="headerlink" title="4 测试Hadoop"></a>4 测试Hadoop</h2><h3 id="4-1创建测试目录"><a href="#4-1创建测试目录" class="headerlink" title="4.1创建测试目录"></a>4.1创建测试目录</h3><p>cd /app/hadoop-2.2.0/bin<br>./hadoop fs -mkdir -p /class3/input</p><h3 id="准备测试数据"><a href="#准备测试数据" class="headerlink" title="准备测试数据"></a>准备测试数据</h3><p>./hadoop fs -copyFromLocal ../etc/hadoop/* /class3/input</p><h3 id="4-2-运行wordcount例子"><a href="#4-2-运行wordcount例子" class="headerlink" title="4.2 运行wordcount例子"></a>4.2 运行wordcount例子</h3><p>cd /app/hadoop-2.2.0/bin<br>./hadoop jar ../share/hadoop/mapreduce/hadoop-mapreduce-examples-2.2.0.jar wordcount /class3/input /class3/output</p><h3 id="4-3-查看结果"><a href="#4-3-查看结果" class="headerlink" title="4.3 查看结果"></a>4.3 查看结果</h3><p>使用如下命令查看运行结果：<br>./hadoop fs -ls /class3/output/<br>./hadoop fs -cat /class3/output/part-r-00000 | less</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hadoop2-0X64位环境搭建&quot;&gt;&lt;a href=&quot;#Hadoop2-0X64位环境搭建&quot; class=&quot;headerlink&quot; title=&quot;Hadoop2.0X64位环境搭建&quot;&gt;&lt;/a&gt;Hadoop2.0X64位环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1、搭建环
      
    
    </summary>
    
      <category term="Hadoop学习之路" scheme="http://yoursite.com/categories/Hadoop%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
    
    
      <category term="Hadoop学习助之路" scheme="http://yoursite.com/tags/Hadoop%E5%AD%A6%E4%B9%A0%E5%8A%A9%E4%B9%8B%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop简单实例</title>
    <link href="http://yoursite.com/2019/06/18/Hadoop%20--hdfs%20%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/06/18/Hadoop --hdfs 简单操作/</id>
    <published>2019-06-18T07:37:55.223Z</published>
    <updated>2019-06-18T07:37:55.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Hadoop-–hdfs-简单操作"><a href="#Hadoop-–hdfs-简单操作" class="headerlink" title="Hadoop –hdfs 简单操作"></a>Hadoop –hdfs 简单操作</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>引入Hadoop依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--添加Hadoop依赖包--&gt;</span><br><span class="line">   &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.hadoop&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;hadoop-client&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;$&#123;hadoop.version&#125;&lt;/version&gt;</span><br><span class="line">   &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>引入cdh的仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;repositories&gt;</span><br><span class="line">   &lt;repository&gt;</span><br><span class="line">     &lt;id&gt;cloudera&lt;/id&gt;</span><br><span class="line">     &lt;url&gt;https://repository.cloudera.com/artifactory/cloudera-repos/&lt;/url&gt;</span><br><span class="line">   &lt;/repository&gt;</span><br><span class="line"> &lt;/repositories&gt;</span><br></pre></td></tr></table></figure><h3 id="hdfs的基本操作命令说明"><a href="#hdfs的基本操作命令说明" class="headerlink" title="hdfs的基本操作命令说明"></a>hdfs的基本操作命令说明</h3><p>hadoop常用命令：<br>hadoop fs -ls / 查看指定目录下内容<br>hadoop fs -put 将本地文件存储至hadoop<br>hadoop fs -copyFromLocal 本地文件系统复制文件到HDFS文件系统<br>hadoop fs -moveFromLocal 本地文件系统移到文件到HDFS文件系统<br>hadoop fs -cat 打开某个已存在文件<br>hadoop fs -text  看指定目录下内容<br>hadoop fs -get   将HDFS中的test.txt复制到本地文件系统中<br>hadoop fs -mkdir 在hadoop指定目录内创建新目录<br>hadoop fs -mv  移动/改名<br>hadoop fs -getmerge 合并文件<br>hadoop fs -rm 删除hadoop上指定文件<br>hadoop fs -rmdir 删除hadoop上指定文件夹</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="创建HDFS文件夹"><a href="#创建HDFS文件夹" class="headerlink" title="创建HDFS文件夹"></a>创建HDFS文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 创建HDFS文件夹</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void mkdir() throws Exception &#123;</span><br><span class="line">        fileSystem.mkdirs(new Path(&quot;/hdfsapi/test&quot;));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="查看HDFS内容"><a href="#查看HDFS内容" class="headerlink" title="查看HDFS内容"></a>查看HDFS内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 查看HDFS内容</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void text()throws Exception &#123;</span><br><span class="line">       FSDataInputStream in = fileSystem.open(new Path(&quot;/cdh_version.properties&quot;));</span><br><span class="line">       IOUtils.copyBytes(in, System.out, 1024);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 创建文件</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void create()throws Exception &#123;</span><br><span class="line">//        FSDataOutputStream out = fileSystem.create(new Path(&quot;/hdfsapi/test/a.txt&quot;));</span><br><span class="line">        FSDataOutputStream out = fileSystem.create(new Path(&quot;/hdfsapi/test/b.txt&quot;));</span><br><span class="line">        out.writeUTF(&quot;hello pk: replication 1&quot;);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="文件名更改"><a href="#文件名更改" class="headerlink" title="文件名更改"></a>文件名更改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * 测试文件名更改</span><br><span class="line">     * @throws Exception</span><br><span class="line">     */</span><br><span class="line">    @Test</span><br><span class="line">    public void rename() throws Exception &#123;</span><br><span class="line">        Path oldPath = new Path(&quot;/hdfsapi/test/b.txt&quot;);</span><br><span class="line">        Path newPath = new Path(&quot;/hdfsapi/test/c.txt&quot;);</span><br><span class="line">        boolean result = fileSystem.rename(oldPath, newPath);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="拷贝本地文件到HDFS文件系统"><a href="#拷贝本地文件到HDFS文件系统" class="headerlink" title="拷贝本地文件到HDFS文件系统"></a>拷贝本地文件到HDFS文件系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">    * 拷贝本地文件到HDFS文件系统</span><br><span class="line">    */</span><br><span class="line">   @Test</span><br><span class="line">   public void copyFromLocalFile() throws Exception &#123;</span><br><span class="line">       Path src = new Path(&quot;/Users/rocky/data/hello.txt&quot;);</span><br><span class="line">       Path dst = new Path(&quot;/hdfsapi/test/&quot;);</span><br><span class="line">       fileSystem.copyFromLocalFile(src,dst);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h4 id="拷贝大文件到HDFS文件系统：带进度"><a href="#拷贝大文件到HDFS文件系统：带进度" class="headerlink" title="拷贝大文件到HDFS文件系统：带进度"></a>拷贝大文件到HDFS文件系统：带进度</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void copyFromLocalBigFile() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        InputStream in = new BufferedInputStream(new FileInputStream(new File(&quot;/Users/rocky/tmp/software/jdk-8u91-linux-x64.tar.gz&quot;)));</span><br><span class="line"></span><br><span class="line">        FSDataOutputStream out = fileSystem.create(new Path(&quot;/hdfsapi/test/jdk.tgz&quot;),</span><br><span class="line">                new Progressable() &#123;</span><br><span class="line">                    public void progress() &#123;</span><br><span class="line">                        System.out.print(&quot;.&quot;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        IOUtils.copyBytes(in, out ,4096);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="拷贝HDFS文件到本地：下载"><a href="#拷贝HDFS文件到本地：下载" class="headerlink" title="拷贝HDFS文件到本地：下载"></a>拷贝HDFS文件到本地：下载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void copyToLocalFile() throws Exception &#123;</span><br><span class="line">        Path src = new Path(&quot;/hdfsapi/test/hello.txt&quot;);</span><br><span class="line">        Path dst = new Path(&quot;/Users/rocky/tmp/software&quot;);</span><br><span class="line">        fileSystem.copyToLocalFile(src, dst);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="查看目标文件夹下的所有文件"><a href="#查看目标文件夹下的所有文件" class="headerlink" title="查看目标文件夹下的所有文件"></a>查看目标文件夹下的所有文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void listFiles() throws Exception &#123;</span><br><span class="line">        FileStatus[] statuses = fileSystem.listStatus(new Path(&quot;/hdfsapi/test&quot;));</span><br><span class="line"></span><br><span class="line">        for(FileStatus file : statuses) &#123;</span><br><span class="line">            String isDir = file.isDirectory() ? &quot;文件夹&quot; : &quot;文件&quot;;</span><br><span class="line">            String permission = file.getPermission().toString();</span><br><span class="line">            short replication = file.getReplication();</span><br><span class="line">            long length = file.getLen();</span><br><span class="line">            String path = file.getPath().toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(isDir + &quot;\t&quot; + permission</span><br><span class="line">                    + &quot;\t&quot; + replication + &quot;\t&quot; + length</span><br><span class="line">                    + &quot;\t&quot; + path</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="递归查看目标文件夹下的所有文件"><a href="#递归查看目标文件夹下的所有文件" class="headerlink" title="递归查看目标文件夹下的所有文件"></a>递归查看目标文件夹下的所有文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">    public void listFilesRecursive() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">        RemoteIterator&lt;LocatedFileStatus&gt; files = fileSystem.listFiles(new Path(&quot;/hdfsapi/test&quot;), true);</span><br><span class="line"></span><br><span class="line">        while (files.hasNext()) &#123;</span><br><span class="line">            LocatedFileStatus file = files.next();</span><br><span class="line">            String isDir = file.isDirectory() ? &quot;文件夹&quot; : &quot;文件&quot;;</span><br><span class="line">            String permission = file.getPermission().toString();</span><br><span class="line">            short replication = file.getReplication();</span><br><span class="line">            long length = file.getLen();</span><br><span class="line">            String path = file.getPath().toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(isDir + &quot;\t&quot; + permission</span><br><span class="line">                    + &quot;\t&quot; + replication + &quot;\t&quot; + length</span><br><span class="line">                    + &quot;\t&quot; + path</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="查看文件块信息"><a href="#查看文件块信息" class="headerlink" title="查看文件块信息"></a>查看文件块信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public void getFileBlockLocations() throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    FileStatus fileStatus = fileSystem.getFileStatus(new Path(&quot;/hdfsapi/test/jdk.tgz&quot;));</span><br><span class="line">    BlockLocation[] blocks = fileSystem.getFileBlockLocations(fileStatus,0,fileStatus.getLen());</span><br><span class="line"></span><br><span class="line">    for(BlockLocation block : blocks) &#123;</span><br><span class="line"></span><br><span class="line">        for(String name: block.getNames()) &#123;</span><br><span class="line">            System.out.println(name +&quot; : &quot; + block.getOffset() + &quot; : &quot; + block.getLength() + &quot; : &quot; + block.getHosts());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本实例提前配置完成Hadoop配置的，只是HDFS的基础使用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Hadoop-–hdfs-简单操作&quot;&gt;&lt;a href=&quot;#Hadoop-–hdfs-简单操作&quot; class=&quot;headerlink&quot; title=&quot;Hadoop –hdfs 简单操作&quot;&gt;&lt;/a&gt;Hadoop –hdfs 简单操作&lt;/h1&gt;&lt;h3 id=&quot;前言&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Hadoop" scheme="http://yoursite.com/categories/Hadoop/"/>
    
    
      <category term="Hadoop实例" scheme="http://yoursite.com/tags/Hadoop%E5%AE%9E%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/06/14/%E6%B5%8B%E8%AF%95%E4%BD%BF%E7%94%A8%E5%8F%88%E6%8B%8D%E4%BA%91%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"/>
    <id>http://yoursite.com/2019/06/14/测试使用又拍云上传图片测试/</id>
    <published>2019-06-14T02:50:59.766Z</published>
    <updated>2019-06-14T02:50:59.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试使用又拍云上传图片测试"><a href="#测试使用又拍云上传图片测试" class="headerlink" title="测试使用又拍云上传图片测试"></a>测试使用又拍云上传图片测试</h1><p><img src="media/15604770911087/1111.jpg" alt="1111"></p><h1 id="测试使用又拍云上传图片测试-1"><a href="#测试使用又拍云上传图片测试-1" class="headerlink" title="测试使用又拍云上传图片测试"></a>测试使用又拍云上传图片测试</h1><p><img src="hexo-imgs.test.upcdn.net/2019/06/14/1111.jpg" alt="1111"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;测试使用又拍云上传图片测试&quot;&gt;&lt;a href=&quot;#测试使用又拍云上传图片测试&quot; class=&quot;headerlink&quot; title=&quot;测试使用又拍云上传图片测试&quot;&gt;&lt;/a&gt;测试使用又拍云上传图片测试&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;media/1560477091
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>阿里代码规范要求避免使用Apache BeanUtils进行属性复</title>
    <link href="http://yoursite.com/2019/06/13/%E9%98%BF%E9%87%8C%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%E8%A6%81%E6%B1%82%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8Apache%20BeanUtils%E8%BF%9B%E8%A1%8C%E5%B1%9E%E6%80%A7%E5%A4%8D%E5%88%B6/"/>
    <id>http://yoursite.com/2019/06/13/阿里代码规范要求避免使用Apache BeanUtils进行属性复制/</id>
    <published>2019-06-13T07:49:43.571Z</published>
    <updated>2019-06-13T07:49:43.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里代码规范要求避免使用Apache-BeanUtils进行属性复制"><a href="#阿里代码规范要求避免使用Apache-BeanUtils进行属性复制" class="headerlink" title="阿里代码规范要求避免使用Apache BeanUtils进行属性复制"></a>阿里代码规范要求避免使用Apache BeanUtils进行属性复制</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在一次开发过程中，刚好看到小伙伴在调用set方法，将数据库中查询出来的数据PO对象的属性拷贝到VO对象中。<br>当PO和VO的两个对象的字段属性绝大部分是一样的，我们一个一个的set做了大量的重复工作，而且这种操作很容易出错，因为对象属性太多，有可能漏掉或者重复set肉眼很难发现。<br>类似这种操作我们很容易想到可以通过反射解决。其实用一个BeanUtils工具类就可以搞定了。<br>但是如果使用Apache的BeanUtils.copyPropreties进行属性拷贝，<strong>这就是一个坑</strong></p><h2 id="阿里代码规范"><a href="#阿里代码规范" class="headerlink" title="阿里代码规范"></a>阿里代码规范</h2><p>当我们开启阿里的代码扫描插件时，如果使用Apache的BeanUtils.copyPropreties进行属性拷贝，它会给一个非常严重的警告。因为，<strong>Apache BeanUtils性能较差，可以使用 Spring BeanUtils 或者 Cglib BeanCopier 来代替。</strong><br>看到这样的警告，有点让人有点不爽。大名鼎鼎的 Apache 提供的包，居然会存在性能问题，以致于阿里给出了严重的警告。</p><h2 id="性能问题究竟是有多严重"><a href="#性能问题究竟是有多严重" class="headerlink" title="性能问题究竟是有多严重"></a>性能问题究竟是有多严重</h2><p>毕竟，在我们的应用场景中，如果只是很微小的性能损耗，但是能带来非常大的便利性，还是可以接受的。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>测试方法接口和实现定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">public interface </span><br><span class="line">PropertiesCopier</span><br><span class="line"> &#123;</span><br><span class="line"> void copyProperties(</span><br><span class="line">Object</span><br><span class="line"> source, </span><br><span class="line">Object</span><br><span class="line"> target) throws </span><br><span class="line">Exception</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">public class </span><br><span class="line">CglibBeanCopierPropertiesCopier</span><br><span class="line"> implements </span><br><span class="line">PropertiesCopier</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line"> public void copyProperties(</span><br><span class="line">Object</span><br><span class="line"> source, </span><br><span class="line">Object</span><br><span class="line"> target) throws </span><br><span class="line">Exception</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">BeanCopier</span><br><span class="line"> copier = </span><br><span class="line">BeanCopier</span><br><span class="line">.create(source.getClass(), target.getClass(), false);</span><br><span class="line"> copier.copy(source, target, null);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 全局静态 BeanCopier，避免每次都生成新的对象</span><br><span class="line">public class </span><br><span class="line">StaticCglibBeanCopierPropertiesCopier</span><br><span class="line"> implements </span><br><span class="line">PropertiesCopier</span><br><span class="line"> &#123;</span><br><span class="line"> private static </span><br><span class="line">BeanCopier</span><br><span class="line"> copier = </span><br><span class="line">BeanCopier</span><br><span class="line">.create(</span><br><span class="line">Account</span><br><span class="line">.class, </span><br><span class="line">Account</span><br><span class="line">.class, false);</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line"> public void copyProperties(</span><br><span class="line">Object</span><br><span class="line"> source, </span><br><span class="line">Object</span><br><span class="line"> target) throws </span><br><span class="line">Exception</span><br><span class="line"> &#123;</span><br><span class="line"> copier.copy(source, target, null);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class </span><br><span class="line">SpringBeanUtilsPropertiesCopier</span><br><span class="line"> implements </span><br><span class="line">PropertiesCopier</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line"> public void copyProperties(</span><br><span class="line">Object</span><br><span class="line"> source, </span><br><span class="line">Object</span><br><span class="line"> target) throws </span><br><span class="line">Exception</span><br><span class="line"> &#123;</span><br><span class="line"> org.springframework.beans.</span><br><span class="line">BeanUtils</span><br><span class="line">.copyProperties(source, target);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class </span><br><span class="line">CommonsBeanUtilsPropertiesCopier</span><br><span class="line"> implements </span><br><span class="line">PropertiesCopier</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line"> public void copyProperties(</span><br><span class="line">Object</span><br><span class="line"> source, </span><br><span class="line">Object</span><br><span class="line"> target) throws </span><br><span class="line">Exception</span><br><span class="line"> &#123;</span><br><span class="line"> org.apache.commons.beanutils.</span><br><span class="line">BeanUtils</span><br><span class="line">.copyProperties(target, source);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">public class </span><br><span class="line">CommonsPropertyUtilsPropertiesCopier</span><br><span class="line"> implements </span><br><span class="line">PropertiesCopier</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">@Override</span><br><span class="line"> public void copyProperties(</span><br><span class="line">Object</span><br><span class="line"> source, </span><br><span class="line">Object</span><br><span class="line"> target) throws </span><br><span class="line">Exception</span><br><span class="line"> &#123;</span><br><span class="line"> org.apache.commons.beanutils.</span><br><span class="line">PropertyUtils</span><br><span class="line">.copyProperties(target, source);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><p>然后写一个参数化的单元测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">@RunWith</span><br><span class="line">(</span><br><span class="line">Parameterized</span><br><span class="line">.class)</span><br><span class="line">public class </span><br><span class="line">PropertiesCopierTest</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">@Parameterized</span><br><span class="line">.</span><br><span class="line">Parameter</span><br><span class="line">(</span><br><span class="line">0</span><br><span class="line">)</span><br><span class="line"> public </span><br><span class="line">PropertiesCopier</span><br><span class="line"> propertiesCopier;</span><br><span class="line"> </span><br><span class="line">// 测试次数</span><br><span class="line"> private static </span><br><span class="line">List</span><br><span class="line">&lt;</span><br><span class="line">Integer</span><br><span class="line">&gt; testTimes = </span><br><span class="line">Arrays</span><br><span class="line">.asList(</span><br><span class="line">100</span><br><span class="line">, </span><br><span class="line">1000</span><br><span class="line">, </span><br><span class="line">10</span><br><span class="line">_000, </span><br><span class="line">100</span><br><span class="line">_000, </span><br><span class="line">1_000_000</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">// 测试结果以 markdown 表格的形式输出</span><br><span class="line"> private static </span><br><span class="line">StringBuilder</span><br><span class="line"> resultBuilder = new </span><br><span class="line">StringBuilder</span><br><span class="line">(</span><br><span class="line">&quot;|实现|100|1,000|10,000|100,000|1,000,000|</span><br><span class="line">&quot;</span><br><span class="line">).append(</span><br><span class="line">&quot;|----|----|----|----|----|----|</span><br><span class="line">&quot;</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">@Parameterized</span><br><span class="line">.</span><br><span class="line">Parameters</span><br><span class="line"> public static </span><br><span class="line">Collection</span><br><span class="line">&lt;</span><br><span class="line">Object</span><br><span class="line">[]&gt; data() &#123;</span><br><span class="line"> </span><br><span class="line">Collection</span><br><span class="line">&lt;</span><br><span class="line">Object</span><br><span class="line">[]&gt; params = new </span><br><span class="line">ArrayList</span><br><span class="line">&lt;&gt;();</span><br><span class="line"> params.add(new </span><br><span class="line">Object</span><br><span class="line">[]&#123;new </span><br><span class="line">StaticCglibBeanCopierPropertiesCopier</span><br><span class="line">()&#125;);</span><br><span class="line"> params.add(new </span><br><span class="line">Object</span><br><span class="line">[]&#123;new </span><br><span class="line">CglibBeanCopierPropertiesCopier</span><br><span class="line">()&#125;);</span><br><span class="line"> params.add(new </span><br><span class="line">Object</span><br><span class="line">[]&#123;new </span><br><span class="line">SpringBeanUtilsPropertiesCopier</span><br><span class="line">()&#125;);</span><br><span class="line"> params.add(new </span><br><span class="line">Object</span><br><span class="line">[]&#123;new </span><br><span class="line">CommonsPropertyUtilsPropertiesCopier</span><br><span class="line">()&#125;);</span><br><span class="line"> params.add(new </span><br><span class="line">Object</span><br><span class="line">[]&#123;new </span><br><span class="line">CommonsBeanUtilsPropertiesCopier</span><br><span class="line">()&#125;);</span><br><span class="line"> return params;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">@Before</span><br><span class="line"> public void setUp() throws </span><br><span class="line">Exception</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">String</span><br><span class="line"> name = propertiesCopier.getClass().getSimpleName().replace(</span><br><span class="line">&quot;PropertiesCopier&quot;</span><br><span class="line">, </span><br><span class="line">&quot;&quot;</span><br><span class="line">);</span><br><span class="line"> resultBuilder.append(</span><br><span class="line">&quot;|&quot;</span><br><span class="line">).append(name).append(</span><br><span class="line">&quot;|&quot;</span><br><span class="line">);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">@Test</span><br><span class="line"> public void copyProperties() throws </span><br><span class="line">Exception</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">Account</span><br><span class="line"> source = new </span><br><span class="line">Account</span><br><span class="line">(</span><br><span class="line">1</span><br><span class="line">, </span><br><span class="line">&quot;test1&quot;</span><br><span class="line">, </span><br><span class="line">30D</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">Account</span><br><span class="line"> target = new </span><br><span class="line">Account</span><br><span class="line">();</span><br><span class="line"> </span><br><span class="line">// 预热一次</span><br><span class="line"> propertiesCopier.copyProperties(source, target);</span><br><span class="line"> for (</span><br><span class="line">Integer</span><br><span class="line"> time : testTimes) &#123;</span><br><span class="line"> long start = </span><br><span class="line">System</span><br><span class="line">.nanoTime();</span><br><span class="line"> for (int i = </span><br><span class="line">0</span><br><span class="line">; i &lt; time; i++) &#123;</span><br><span class="line"> propertiesCopier.copyProperties(source, target);</span><br><span class="line"> &#125;</span><br><span class="line"> resultBuilder.append((</span><br><span class="line">System</span><br><span class="line">.nanoTime() - start) / </span><br><span class="line">1_000_000D</span><br><span class="line">).append(</span><br><span class="line">&quot;|&quot;</span><br><span class="line">);</span><br><span class="line"> &#125;</span><br><span class="line"> resultBuilder.append(</span><br><span class="line">&quot;</span><br><span class="line">&quot;</span><br><span class="line">);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">@AfterClass</span><br><span class="line"> public static void tearDown() throws </span><br><span class="line">Exception</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">System</span><br><span class="line">.out.println(</span><br><span class="line">&quot;测试结果：&quot;</span><br><span class="line">);</span><br><span class="line"> </span><br><span class="line">System</span><br><span class="line">.out.println(resultBuilder);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><table><thead><tr><th>实现</th><th>100</th><th align="left">1,000</th></tr></thead><tbody><tr><td>StaticCglibBeanCopier</td><td>0.0563361</td><td align="left">0.680016</td></tr><tr><td>CglibBeanCopier</td><td>4.099259</td><td align="left">12.252336</td></tr><tr><td>SpringBeanUitils</td><td>3.80229</td><td align="left">9.268228</td></tr><tr><td>CommonsPropertyUtils</td><td>6,797116</td><td align="left">20.59255</td></tr></tbody></table><p>结果表明，Cglib 的 BeanCopier 的拷贝速度是最快的，即使是百万次的拷贝也只需要 10 毫秒！ 相比而言，最差的是 Commons 包的 BeanUtils.copyProperties 方法，100 次拷贝测试与表现最好的 Cglib 相差 400 倍之多</p><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><p>查看源码，我们会发现 CommonsBeanUtils 主要有以下几个耗时的地方：</p><p>1.输出了大量的日志调试信息<br>2.重复的对象类型检查<br>3.类型转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">public void copyProperties(final </span><br><span class="line">Object</span><br><span class="line"> dest, final </span><br><span class="line">Object</span><br><span class="line"> orig)</span><br><span class="line"> throws </span><br><span class="line">IllegalAccessException</span><br><span class="line">, </span><br><span class="line">InvocationTargetException</span><br><span class="line"> &#123;</span><br><span class="line"> </span><br><span class="line">// 类型检查 </span><br><span class="line"> if (orig instanceof </span><br><span class="line">DynaBean</span><br><span class="line">) &#123;</span><br><span class="line"> ...</span><br><span class="line"> &#125; else if (orig instanceof </span><br><span class="line">Map</span><br><span class="line">) &#123;</span><br><span class="line"> ...</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> final </span><br><span class="line">PropertyDescriptor</span><br><span class="line">[] origDescriptors = ...</span><br><span class="line"> for (</span><br><span class="line">PropertyDescriptor</span><br><span class="line"> origDescriptor : origDescriptors) &#123;</span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line">// 这里每个属性都调一次 copyProperty</span><br><span class="line"> copyProperty(dest, name, value);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> public void copyProperty(final </span><br><span class="line">Object</span><br><span class="line"> bean, </span><br><span class="line">String</span><br><span class="line"> name, </span><br><span class="line">Object</span><br><span class="line"> value)</span><br><span class="line"> throws </span><br><span class="line">IllegalAccessException</span><br><span class="line">, </span><br><span class="line">InvocationTargetException</span><br><span class="line"> &#123;</span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line">// 这里又进行一次类型检查</span><br><span class="line"> if (target instanceof </span><br><span class="line">DynaBean</span><br><span class="line">) &#123;</span><br><span class="line"> ...</span><br><span class="line"> &#125;</span><br><span class="line"> ...</span><br><span class="line"> </span><br><span class="line">// 需要将属性转换为目标类型</span><br><span class="line"> value = convertForCopy(value, type);</span><br><span class="line"> ...</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line">// 而这个 convert 方法在日志级别为 debug 的时候有很多的字符串拼接</span><br><span class="line"> public &lt;T&gt; T convert(final </span><br><span class="line">Class</span><br><span class="line">&lt;T&gt; type, </span><br><span class="line">Object</span><br><span class="line"> value) &#123;</span><br><span class="line"> if (log().isDebugEnabled()) &#123;</span><br><span class="line"> log().debug(</span><br><span class="line">&quot;Converting&quot;</span><br><span class="line"> + (value == null ? </span><br><span class="line">&quot;&quot;</span><br><span class="line"> : </span><br><span class="line">&quot; &apos;&quot;</span><br><span class="line"> + toString(sourceType) + </span><br><span class="line">&quot;&apos;&quot;</span><br><span class="line">) + </span><br><span class="line">&quot; value &apos;&quot;</span><br><span class="line"> + value + </span><br><span class="line">&quot;&apos; to type &apos;&quot;</span><br><span class="line"> + toString(targetType) + </span><br><span class="line">&quot;&apos;&quot;</span><br><span class="line">);</span><br><span class="line"> &#125;</span><br><span class="line"> ...</span><br><span class="line"> if (targetType.equals(</span><br><span class="line">String</span><br><span class="line">.class)) &#123;</span><br><span class="line"> return targetType.cast(convertToString(value));</span><br><span class="line"> &#125; else if (targetType.equals(sourceType)) &#123;</span><br><span class="line"> if (log().isDebugEnabled()) &#123;</span><br><span class="line"> log().debug(</span><br><span class="line">&quot;No conversion required, value is already a &quot;</span><br><span class="line"> + toString(targetType));</span><br><span class="line"> &#125;</span><br><span class="line"> return targetType.cast(value);</span><br><span class="line"> &#125; else &#123;</span><br><span class="line"> </span><br><span class="line">// 这个 convertToType 方法里也需要做类型检查</span><br><span class="line"> final </span><br><span class="line">Object</span><br><span class="line"> result = convertToType(targetType, value);</span><br><span class="line"> if (log().isDebugEnabled()) &#123;</span><br><span class="line"> log().debug(</span><br><span class="line">&quot;Converted to &quot;</span><br><span class="line"> + toString(targetType) + </span><br><span class="line">&quot; value &apos;&quot;</span><br><span class="line"> + result + </span><br><span class="line">&quot;&apos;&quot;</span><br><span class="line">);</span><br><span class="line"> &#125;</span><br><span class="line"> return targetType.cast(result);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="性能和源码分析推荐阅读"><a href="#性能和源码分析推荐阅读" class="headerlink" title="性能和源码分析推荐阅读"></a>性能和源码分析推荐阅读</h2><p>几种copyProperties工具类性能比较：<a href>https://www.jianshu.com/p/bcbacab3b89e</a></p><p>CGLIB中BeanCopier源码实现：<a href>https://www.jianshu.com/p/f8b892e08d26</a></p><p>Java Bean Copy框架性能对比：<a href>https://yq.aliyun.com/articles/392185</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阿里代码规范要求避免使用Apache-BeanUtils进行属性复制&quot;&gt;&lt;a href=&quot;#阿里代码规范要求避免使用Apache-BeanUtils进行属性复制&quot; class=&quot;headerlink&quot; title=&quot;阿里代码规范要求避免使用Apache BeanU
      
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="工作经验 java" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C-java/"/>
    
  </entry>
  
  <entry>
    <title>解决大量if判断</title>
    <link href="http://yoursite.com/2019/06/13/%E4%BC%98%E9%9B%85%E8%A7%A3%E5%86%B3%E5%A4%A7%E9%87%8Fif%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2019/06/13/优雅解决大量if判断/</id>
    <published>2019-06-13T07:47:28.463Z</published>
    <updated>2019-06-13T07:47:28.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优雅解决大量if判断"><a href="#优雅解决大量if判断" class="headerlink" title="优雅解决大量if判断"></a>优雅解决大量if判断</h1><h2 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h2><p>大家都在项目上遇到大量的if判断影响代码的可读性和复杂度，对于后期不好维护等问题。下面如何解决大量if条件让代码看起来很优雅</p><h2 id="二：项目需求"><a href="#二：项目需求" class="headerlink" title="二：项目需求"></a>二：项目需求</h2><p>我在项目里有个集成支付接口，比如支付宝、微信、银联等支付接口。在前端入参的支付类型，后端根据支付类型调用封装好的支付接口，这样一来代码就会存在难以维护的if校验。</p><h2 id="三-引入策略设计模式解决if判断"><a href="#三-引入策略设计模式解决if判断" class="headerlink" title="三:引入策略设计模式解决if判断"></a>三:引入策略设计模式解决if判断</h2><h3 id="项目中的实例"><a href="#项目中的实例" class="headerlink" title="项目中的实例"></a>项目中的实例</h3><p>1.创建一个interface接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface RefundStrategy &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param tradeNo 交易流水号</span><br><span class="line">     * @param refundNo 退款单号</span><br><span class="line">     * @param totalAmount 订单总金额</span><br><span class="line">     * @param refundAmount 退款金额</span><br><span class="line">     * @param refundReason 退款原因</span><br><span class="line">     * @return 退款结果集 &#123;@link PayResult&#125;</span><br><span class="line">     */</span><br><span class="line">    PayResult doPayRefund(String tradeNo, String refundNo, String orderNo,String thirdpartPayNo, String totalAmount, String refundAmount, String refundReason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-在Ali实现类实现该接口"><a href="#2-在Ali实现类实现该接口" class="headerlink" title="2.在Ali实现类实现该接口"></a>2.在Ali实现类实现该接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Data</span><br><span class="line">@Component</span><br><span class="line">public class AliPayRefundStrategy implements RefundStrategy &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static YueProperties properties;</span><br><span class="line"></span><br><span class="line">    private static CommonUtil commonUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static void setCommonUtilFactory(CommonUtil util) &#123;</span><br><span class="line">        if (AliPayRefundStrategy.commonUtil == null) &#123;</span><br><span class="line">            AliPayRefundStrategy.commonUtil = util;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    public void setCommonUtil(CommonUtil util) &#123;</span><br><span class="line">        AliPayRefundStrategy.setCommonUtilFactory(util);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static void setPropertiesFactory(YueProperties yueProperties) &#123;</span><br><span class="line">        if (AliPayRefundStrategy.properties == null) &#123;</span><br><span class="line">            AliPayRefundStrategy.properties = yueProperties;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    public void setProperties(YueProperties yueProperties) &#123;</span><br><span class="line">        AliPayRefundStrategy.setPropertiesFactory(yueProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public PayResult doPayRefund(String tradeNo, String refundNo,String orderNo,String thirdpartPayNo, String totalAmount, String refundAmount, String refundReason) &#123;</span><br><span class="line"></span><br><span class="line">        YuePay yuepay = new YueAliPay(properties.getPay().getAlipay().getAppId(), properties.getPay().getAlipay().getPublicKey(),</span><br><span class="line">                properties.getPay().getAlipay().getPrivateKey());</span><br><span class="line">        String response = yuepay.refund(tradeNo, refundNo, totalAmount, refundAmount, refundReason);</span><br><span class="line">        PayResult payResult = commonUtil.readValue(response, PayResult.class);</span><br><span class="line">        //获取退款交易流水号</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        Map&lt;String, String&gt; map = commonUtil.readValue(payResult.getParams(), Map.class);</span><br><span class="line">        payResult.setTradeNo(map.get(&quot;trade_no&quot;));</span><br><span class="line">        return payResult;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建策略工厂"><a href="#3-创建策略工厂" class="headerlink" title="3.创建策略工厂"></a>3.创建策略工厂</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class RefundStrategyFactory &#123;</span><br><span class="line"></span><br><span class="line">    private static  Map&lt;Integer, RefundStrategy&gt;  originalMap= new HashMap&lt;&gt;();</span><br><span class="line">    private static  Map&lt;Integer, RefundStrategy&gt; unOriginalMap = new HashMap&lt;&gt;();</span><br><span class="line">    //原路退款</span><br><span class="line">    static &#123;</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_CARD.getValue(), new WxPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_H5.getValue(), new WxPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY.getValue(), new AliPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY_H5.getValue(), new AliPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.JHPAY.getValue(), new JuhePayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_GZH.getValue(), new WxPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.PayType.UNION_PAY.getValue(), new UnionPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.PayType.BEST_PAY.getValue(), new BestPayRefundStrategy());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //手工退款</span><br><span class="line">    static &#123;</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.JHPAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.PayType.CASH.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.COMPANY_TRANSFER.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.SZ_ICBC.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.OTHER.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_CARD.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.NB_ICBC.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.CQ_ICBC.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.GZ_ICBC.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.PayType.POS.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.PayType.BEST_PAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_CARD.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_H5.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY_H5.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.JHPAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_GZH.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.PayType.UNION_PAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private RefundStrategyFactory() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   public static RefundStrategy getPayRefundStrategy(Integer key, Boolean original) &#123;</span><br><span class="line">        if (original) &#123;</span><br><span class="line">            return  originalMap.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">       return  unOriginalMap.get(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.创建上下文请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class PayRefundContext &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RefundStrategy payRefundStrategy;</span><br><span class="line"></span><br><span class="line">    public PayRefundContext(RefundStrategy payRefundStrategy) &#123;</span><br><span class="line">        this.payRefundStrategy = payRefundStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public PayResult executePayRefundStrategy(String tradeNo, String refundNo,String orderNo, String thirdpartPayNo, String totalAmount, String refundAmount, String refundReason) &#123;</span><br><span class="line">       return payRefundStrategy.doPayRefund(tradeNo, refundNo, orderNo, thirdpartPayNo, totalAmount, refundAmount, refundReason);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-测试类"><a href="#5-测试类" class="headerlink" title="5.测试类"></a>5.测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void executePayRefundStrategy() &#123;</span><br><span class="line"></span><br><span class="line">      PayRefundContext payRefundContext = new PayRefundContext(RefundStrategyFactory.getPayRefundStrategy(18, true));</span><br><span class="line">      PayResult payResult = payRefundContext.executePayRefundStrategy(</span><br><span class="line">              &quot;1111&quot;,&quot;1111&quot;,&quot;1111&quot;, &quot;1111&quot;,&quot;111&quot;,&quot;111&quot;,&quot;1111&quot;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;优雅解决大量if判断&quot;&gt;&lt;a href=&quot;#优雅解决大量if判断&quot; class=&quot;headerlink&quot; title=&quot;优雅解决大量if判断&quot;&gt;&lt;/a&gt;优雅解决大量if判断&lt;/h1&gt;&lt;h2 id=&quot;一：前言&quot;&gt;&lt;a href=&quot;#一：前言&quot; class=&quot;head
      
    
    </summary>
    
      <category term="工作" scheme="http://yoursite.com/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="工作经验" scheme="http://yoursite.com/tags/%E5%B7%A5%E4%BD%9C%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>java8日期操作</title>
    <link href="http://yoursite.com/2019/06/12/Java8%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/06/12/Java8日期时间操作/</id>
    <published>2019-06-12T08:16:06.443Z</published>
    <updated>2019-06-12T08:16:06.440Z</updated>
    
    <content type="html"><![CDATA[<p>Java8日期时间操作</p><h2 id="一：简介"><a href="#一：简介" class="headerlink" title="一：简介"></a><strong>一：简介</strong></h2><p>在java8之前 日期时间的API一直被开发者诟病，包括：Java.util.Date是可变类型SimpleDateFormat非线程安全等问题。故此，Java8引入了一套全新的日期时间处理API，新的API基于ISO标准日历系统。</p><h2 id="二-Java-util-Date不推荐使用"><a href="#二-Java-util-Date不推荐使用" class="headerlink" title="二:Java.util.Date不推荐使用"></a>二:Java.util.Date不推荐使用</h2><p>Calendar类虽然有所改进，但仍有很多需要改进的地方，所以对于严肃的日期/时间工作，每个人都建议使用Joda-Time. Java 8带来了由JSR-310定义的Joda-Time启发的新java.time.* package，旧的日期/日历类。<br>除了这个一般的缺陷(其中包括缺少一个时区组件以及在DateFormat中更好地处理日期格式化和无法使用非公历日历表示)的问题，有一些具体的问题，真的伤害Date类，包括年份与公元年年份偏移量为1900的事实。</p><p>日历有自己的问题，但即使早在JDK 1.1，显然java.util.Date不会削减它。即使日历是可以说是最差的JDK API，它已经采取到版本7尝试解决它。</p><h2 id="三：Java8初识时间日期"><a href="#三：Java8初识时间日期" class="headerlink" title="三：Java8初识时间日期"></a>三：Java8初识时间日期</h2><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p><code>//Clock时钟        Clock clock = Clock.systemDefaultZone();        long millis = clock.millis();        //获取指定时间点 用Instant         Instant instant = clock.instant();        //也可以取Date        Date legacyDate = Date.from(instant);</code></p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p><code>//在新API中时区使用ZoneId来表示。        ZoneId.getAvailableZoneIds();        ZoneId zoneId1 = ZoneId.of(&quot;Europe/Berlin&quot;);        ZoneId zoneId2 = ZoneId.of(&quot;Brazil/East&quot;);        System.out.println(zoneId1.getRules());</code></p><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><p><code>/LocalTime 本地时间        LocalTime localTime = LocalTime.now(zoneId1);        LocalTime localTime1 = LocalTime.now(zoneId2);        long hours = ChronoUnit.HOURS.between(localTime1,localTime);        System.out.println(hours);</code>      </p><h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><p><code>//LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串。        LocalTime localTime2= LocalTime.of(23, 59, 59);        System.out.println(localTime);// 23:59:59        DateTimeFormatter germanFormatte = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT).withLocale(Locale.GERMAN);        String leetTime = localTime2.format(germanFormatte).toString();        System.out.println(leetTime);</code></p><h2 id="四：相关API说明"><a href="#四：相关API说明" class="headerlink" title="四：相关API说明"></a>四：相关API说明</h2><p>  == nstant         时间戳<br>Duration        持续时间、时间差<br>LocalDate       只包含日期，比如：2018-09-24<br>LocalTime       只包含时间，比如：10:32:10<br>LocalDateTime   包含日期和时间，比如：2018-09-24 10:32:10<br>Peroid          时间段<br>ZoneOffset      时区偏移量，比如：+8:00<br>ZonedDateTime   带时区的日期时间<br>Clock           时钟，可用于获取当前时间戳</p><h1 id="java-time-format-DateTimeFormatter-时间格式化类"><a href="#java-time-format-DateTimeFormatter-时间格式化类" class="headerlink" title="java.time.format.DateTimeFormatter      时间格式化类     "></a>java.time.format.DateTimeFormatter      时间格式化类     </h1><h3 id="五：拓展"><a href="#五：拓展" class="headerlink" title="五：拓展"></a>五：拓展</h3><p><a href>  https://docs.oracle.com/javase/8/docs/api/  </a>        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java8日期时间操作&lt;/p&gt;
&lt;h2 id=&quot;一：简介&quot;&gt;&lt;a href=&quot;#一：简介&quot; class=&quot;headerlink&quot; title=&quot;一：简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;一：简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在java8之前 日期时间的API一直被开发者诟病，
      
    
    </summary>
    
      <category term="JDK8新特性" scheme="http://yoursite.com/categories/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="jdk8" scheme="http://yoursite.com/tags/jdk8/"/>
    
  </entry>
  
  <entry>
    <title>java11 --HttpClient</title>
    <link href="http://yoursite.com/2019/06/12/JDK11%E6%96%B0%E7%89%B9%E6%80%A7%20-httpClient/"/>
    <id>http://yoursite.com/2019/06/12/JDK11新特性 -httpClient/</id>
    <published>2019-06-12T08:14:56.972Z</published>
    <updated>2019-06-12T08:14:56.968Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="JDK11新特性-–httpClient"><a href="#JDK11新特性-–httpClient" class="headerlink" title="JDK11新特性 –httpClient"></a>JDK11新特性 –httpClient</h1><h2 id="一-HttpURLConnenction目前存在的问题"><a href="#一-HttpURLConnenction目前存在的问题" class="headerlink" title="一:HttpURLConnenction目前存在的问题"></a>一:HttpURLConnenction目前存在的问题</h2><p>1.其基类 URLConnection 当初是设计为支持多协议，但其中大多已经成为非主流（ftp, gopher…）<br>2.API 的设计早于 HTTP/1.1，过度抽象<br>3.难以使用，存在许多没有文档化的行为<br>4.它只支持阻塞模式（每个请求 / 响应占用一个线程）</p><h2 id="二-HttpClient简介"><a href="#二-HttpClient简介" class="headerlink" title="二: HttpClient简介"></a>二: HttpClient简介</h2><p>httpclient是Apache Jakarta common下的子项目，用来提供高效的、最新的、更能丰富的支持http协议的客户端编程工具包，并且它支持http协议最新的版本和建议。httpclient已经应用在很多项目中，比如Apache Jakarta上很著名的两个开源项目cactus和httplunit都使用了httpclient。</p><h2 id="三-HttpClient特性"><a href="#三-HttpClient特性" class="headerlink" title="三:HttpClient特性"></a>三:HttpClient特性</h2><p>1.以可扩展的面向对象的结构实现了HTTP全部的方法（GET、POST、put、delete、head、options、trace）。</p><p>2.支持HTTPS协议。</p><p>3.通过HTTP代理建立透明的连接。<br>4.连接管理器支持多线程应用。支持设置最大连接数，同事支持设置每个主机的最大连接数，发现并关闭过期的连接。</p><p>5.自动处理Set-Cookie中的Cookie。</p><p>6.插件式的自定义Cookie策略。</p><p>7.request的输出流可以避免流中内容直接缓冲到socket服务器。</p><p>8.Response的输入流可以有效的从socket服务器直接读取相应内容</p><h2 id="三-使用方法"><a href="#三-使用方法" class="headerlink" title="三:使用方法"></a>三:使用方法</h2><p>使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。<br>1、创建httpclient对象。<br>2、创建请求方法的实例，并制定请求url。如果需要发送get请求，创建httpclient对象；如果需要发送post请求，创建httpPOST对象。<br>3、如果需要发送请求参数，可调用httpget、httpPost共同的setparams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。<br>4、调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。<br>5、调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。<br>6、释放连接。无论执行方法是否成功，都必须释放连接</p><h2 id="四-代码实例"><a href="#四-代码实例" class="headerlink" title="四:代码实例"></a>四:代码实例</h2><h3 id="实例1-同步get请求"><a href="#实例1-同步get请求" class="headerlink" title="实例1:同步get请求"></a>实例1:同步get请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void syncGet() throws InterruptedException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">    HttpRequest request = HttpRequest.newBuilder().uri(URI.create(&quot;https://www.baidu.com&quot;)).build();</span><br><span class="line">    HttpResponse&lt;String&gt; response =</span><br><span class="line">            client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line"></span><br><span class="line">    System.out.println(response.body());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例2-异步Get-请求"><a href="#实例2-异步Get-请求" class="headerlink" title="实例2:异步Get 请求"></a>实例2:异步Get 请求</h3><figure class="highlight plain"><figcaption><span>void asyncGet() throws IOException, InterruptedException, ExecutionException &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">    HttpRequest request = HttpRequest.newBuilder().uri(URI.create(&quot;https://www.baidu.com&quot;)).build();</span><br><span class="line">    CompletableFuture&lt;String&gt; result = client.sendAsync(request, HttpResponse.BodyHandlers.ofString()).thenApply(HttpResponse::body);</span><br><span class="line">    System.out.println(result.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例3-Post请求"><a href="#实例3-Post请求" class="headerlink" title="实例3 Post请求"></a>实例3 Post请求</h3><figure class="highlight plain"><figcaption><span>void testPostForm() throws IOException, InterruptedException &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    HttpClient client = HttpClient.newBuilder().build();</span><br><span class="line">    HttpRequest request = HttpRequest.newBuilder()</span><br><span class="line">            .uri(URI.create(&quot;http://www.w3school.com.cn/demo/demo_form.asp&quot;))</span><br><span class="line">            .header(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;)</span><br><span class="line">            .POST(HttpRequest.BodyPublishers.ofString(&quot;name1=value1&amp;name2=value2&quot;))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line">    System.out.println(response.statusCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例4-JSON传参-header指定内容是表单类型，然后通过BodyPublishers-ofString传递表单数据，需要自己构建表单参数"><a href="#实例4-JSON传参-header指定内容是表单类型，然后通过BodyPublishers-ofString传递表单数据，需要自己构建表单参数" class="headerlink" title="实例4:JSON传参 header指定内容是表单类型，然后通过BodyPublishers.ofString传递表单数据，需要自己构建表单参数"></a>实例4:JSON传参 header指定内容是表单类型，然后通过BodyPublishers.ofString传递表单数据，需要自己构建表单参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">      StockDto dto = new StockDto();</span><br><span class="line">      dto.setName(&quot;hj&quot;);</span><br><span class="line">      dto.setSymbol(&quot;hj&quot;);</span><br><span class="line">      dto.setType(StockDto.StockType.SH);</span><br><span class="line">      String requestBody = objectMapper</span><br><span class="line">        .writerWithDefaultPrettyPrinter()</span><br><span class="line">        .writeValueAsString(dto);</span><br><span class="line">      </span><br><span class="line">      HttpRequest request = HttpRequest.newBuilder(URI.create(&quot;http://localhost:8080/json/demo&quot;))</span><br><span class="line">        .header(&quot;Content-Type&quot;, &quot;application/json&quot;)</span><br><span class="line">        .POST(HttpRequest.BodyPublishers.ofString(requestBody))</span><br><span class="line">        .build();</span><br><span class="line">      </span><br><span class="line">      CompletableFuture&lt;StockDto&gt; result = HttpClient.newHttpClient()</span><br><span class="line">        .sendAsync(request, HttpResponse.BodyHandlers.ofString())</span><br><span class="line">        .thenApply(HttpResponse::body)</span><br><span class="line">        .thenApply(body -&gt; &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">          return objectMapper.readValue(body,StockDto.class);</span><br><span class="line">         &#125; catch (IOException e) &#123;</span><br><span class="line">          return new StockDto();</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;);StockDto</span><br><span class="line">System.out.println(result.get());</span><br></pre></td></tr></table></figure><h3 id="实例5-并发请求"><a href="#实例5-并发请求" class="headerlink" title="实例5:并发请求"></a>实例5:并发请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//endAsync方法返回的是CompletableFuture，可以方便地进行转换、组合等操作</span><br><span class="line">//这里使用CompletableFuture.allOf组合在一起，最后调用join等待所有future完成</span><br><span class="line">public void testConcurrentRequests()&#123;</span><br><span class="line">        HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">        List&lt;String&gt; urls = List.of(&quot;http://www.baidu.com&quot;,&quot;http://www.alibaba.com/&quot;,&quot;http://www.tencent.com&quot;);</span><br><span class="line">        List&lt;HttpRequest&gt; requests = urls.stream()</span><br><span class="line">                .map(url -&gt; HttpRequest.newBuilder(URI.create(url)))</span><br><span class="line">                .map(reqBuilder -&gt; reqBuilder.build())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        List&lt;CompletableFuture&lt;HttpResponse&lt;String&gt;&gt;&gt; futures = requests.stream()</span><br><span class="line">                .map(request -&gt; client.sendAsync(request, HttpResponse.BodyHandlers.ofString()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        futures.stream()</span><br><span class="line">                .forEach(e -&gt; e.whenComplete((resp,err) -&gt; &#123;</span><br><span class="line">                    if(err != null)&#123;</span><br><span class="line">                        err.printStackTrace();</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        System.out.println(resp.body());</span><br><span class="line">                        System.out.println(resp.statusCode());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">        CompletableFuture.allOf(futures</span><br><span class="line">                .toArray(CompletableFuture&lt;?&gt;[]::new))</span><br><span class="line">                .join();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="六-总结"><a href="#六-总结" class="headerlink" title="六:总结"></a>六:总结</h2><h3 id="HttpClient中常用到的类"><a href="#HttpClient中常用到的类" class="headerlink" title="HttpClient中常用到的类"></a>HttpClient中常用到的类</h3><p><em>HttpClient<br>         |– DefaultHttpClient<br>                   构造方法：     DefaultHttpClient<br>                   主要方法：     HttpResponse  execute(HttpUriRequest request)<br>HttpUriRequest<br>         |– HttpGet<br>                   构造方法：     HttpGet()<br>                                               HttpGet(String uri)<br>         |– HttpPost<br>                   构造方法：     HttpPost(String uri)<br>                   主要方法：     void setEntity(HttpEntity entity)<br>HttpResponse<br>         主要方法：<br>                   StatusLine getStatusLine()<br>                   Header[] getAllHeaders();<br>                   HttpEntity getEntity();<br>HttpEntity<br>         主要方法：<br>                   InputStream getContent();<br>                   long getContentLength();<br>                   Header getContentType();<br>         |– UrlEncodedFormEntity<br>                   构造方法：UrlEncodedFormEntity(List&lt;? extends NameValuePair&gt; params)<br>                                               //用于向请求对象中写入请求实体（包含请求参数（NameValuePair））<br>EntityUtils<br>         public static byte[] toByteArray(HttpEntity entity)<br>         public static String toString(HttpEntity entity)<br>         public static String toString(HttpEntity entity , String encoding)<br>StatusLine<br>         int getStatusCode()<br>HttpStatus<br>         SC_OK   SC_NOT_FOUND<br>Header<br>         String getName()<br>         String getValue()<br>NameValuePair<br>         String getName()<br>         String getValue()<br>         |– BasicNameValuePair<br>                   构造方法：BasicNameValuePair(String name , String value)</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;JDK11新特性-–httpClient&quot;&gt;&lt;a href=&quot;#JDK11新特性-–httpClient&quot; class=&quot;headerlink&quot; title=&quot;JDK11新特性 –httpClient&quot;&gt;&lt;/a&gt;JDK11新特性 –httpClient&lt;
      
    
    </summary>
    
      <category term="jdk11新特性" scheme="http://yoursite.com/categories/jdk11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/06/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/06/11/单例模型/</id>
    <published>2019-06-11T12:49:12.874Z</published>
    <updated>2019-06-11T12:49:12.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模型"><a href="#单例模型" class="headerlink" title="单例模型"></a>单例模型</h1><h2 id="定义：保证一个类仅有一个实例，并且提供一个全局访问点"><a href="#定义：保证一个类仅有一个实例，并且提供一个全局访问点" class="headerlink" title="定义：保证一个类仅有一个实例，并且提供一个全局访问点"></a><strong>定义：</strong>保证一个类仅有一个实例，并且提供一个全局访问点</h2><h2 id="类型：创建型"><a href="#类型：创建型" class="headerlink" title="类型：创建型"></a>类型：创建型</h2><hr><h2 id="单例-使用场景"><a href="#单例-使用场景" class="headerlink" title="单例-使用场景"></a>单例-使用场景</h2><p>​        想确保任何情况下都绝对只有一个实例</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>在内存里只有一个实例，减少了内存开销</p><p> 可以避免对资源的多重占用</p><p> 设置全局访问点，严格控制访问</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>没有接口，需要扩展代码</p><h2 id="单例-懒汉型"><a href="#单例-懒汉型" class="headerlink" title="单例-懒汉型"></a>单例-懒汉型</h2><p><img src="/%E7%AE%80%E4%B9%A6%E7%B4%A0%E6%9D%90/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%9E%8B/%E6%87%92%E6%B1%89test.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模型&quot;&gt;&lt;a href=&quot;#单例模型&quot; class=&quot;headerlink&quot; title=&quot;单例模型&quot;&gt;&lt;/a&gt;单例模型&lt;/h1&gt;&lt;h2 id=&quot;定义：保证一个类仅有一个实例，并且提供一个全局访问点&quot;&gt;&lt;a href=&quot;#定义：保证一个类仅有一个实例，并且提供
      
    
    </summary>
    
    
  </entry>
  
</feed>
