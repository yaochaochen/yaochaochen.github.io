<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>来自远方的程序猿</title>
  
  <subtitle>一起快乐入坑</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-12T09:05:29.485Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>yaochaochen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/06/12/%E4%BC%98%E9%9B%85%E8%A7%A3%E5%86%B3%E5%A4%A7%E9%87%8Fif%E5%88%A4%E6%96%AD/"/>
    <id>http://yoursite.com/2019/06/12/优雅解决大量if判断/</id>
    <published>2019-06-12T09:05:29.485Z</published>
    <updated>2019-06-12T09:05:29.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="优雅解决大量if判断"><a href="#优雅解决大量if判断" class="headerlink" title="优雅解决大量if判断"></a>优雅解决大量if判断</h1><h2 id="一：前言"><a href="#一：前言" class="headerlink" title="一：前言"></a>一：前言</h2><p>大家都在项目上遇到大量的if判断影响代码的可读性和复杂度，对于后期不好维护等问题。下面如何解决大量if条件让代码看起来很优雅</p><h2 id="二：项目需求"><a href="#二：项目需求" class="headerlink" title="二：项目需求"></a>二：项目需求</h2><p>我在项目里有个集成支付接口，比如支付宝、微信、银联等支付接口。在前端入参的支付类型，后端根据支付类型调用封装好的支付接口，这样一来代码就会存在难以维护的if校验。</p><h2 id="三-引入策略设计模式解决if判断"><a href="#三-引入策略设计模式解决if判断" class="headerlink" title="三:引入策略设计模式解决if判断"></a>三:引入策略设计模式解决if判断</h2><h3 id="项目中的实例"><a href="#项目中的实例" class="headerlink" title="项目中的实例"></a>项目中的实例</h3><p>1.创建一个interface接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public interface RefundStrategy &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @param tradeNo 交易流水号</span><br><span class="line">     * @param refundNo 退款单号</span><br><span class="line">     * @param totalAmount 订单总金额</span><br><span class="line">     * @param refundAmount 退款金额</span><br><span class="line">     * @param refundReason 退款原因</span><br><span class="line">     * @return 退款结果集 &#123;@link PayResult&#125;</span><br><span class="line">     */</span><br><span class="line">    PayResult doPayRefund(String tradeNo, String refundNo, String orderNo,String thirdpartPayNo, String totalAmount, String refundAmount, String refundReason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-在Ali实现类实现该接口"><a href="#2-在Ali实现类实现该接口" class="headerlink" title="2.在Ali实现类实现该接口"></a>2.在Ali实现类实现该接口</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Data</span><br><span class="line">@Component</span><br><span class="line">public class AliPayRefundStrategy implements RefundStrategy &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static YueProperties properties;</span><br><span class="line"></span><br><span class="line">    private static CommonUtil commonUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static void setCommonUtilFactory(CommonUtil util) &#123;</span><br><span class="line">        if (AliPayRefundStrategy.commonUtil == null) &#123;</span><br><span class="line">            AliPayRefundStrategy.commonUtil = util;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    public void setCommonUtil(CommonUtil util) &#123;</span><br><span class="line">        AliPayRefundStrategy.setCommonUtilFactory(util);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static void setPropertiesFactory(YueProperties yueProperties) &#123;</span><br><span class="line">        if (AliPayRefundStrategy.properties == null) &#123;</span><br><span class="line">            AliPayRefundStrategy.properties = yueProperties;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    public void setProperties(YueProperties yueProperties) &#123;</span><br><span class="line">        AliPayRefundStrategy.setPropertiesFactory(yueProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public PayResult doPayRefund(String tradeNo, String refundNo,String orderNo,String thirdpartPayNo, String totalAmount, String refundAmount, String refundReason) &#123;</span><br><span class="line"></span><br><span class="line">        YuePay yuepay = new YueAliPay(properties.getPay().getAlipay().getAppId(), properties.getPay().getAlipay().getPublicKey(),</span><br><span class="line">                properties.getPay().getAlipay().getPrivateKey());</span><br><span class="line">        String response = yuepay.refund(tradeNo, refundNo, totalAmount, refundAmount, refundReason);</span><br><span class="line">        PayResult payResult = commonUtil.readValue(response, PayResult.class);</span><br><span class="line">        //获取退款交易流水号</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        Map&lt;String, String&gt; map = commonUtil.readValue(payResult.getParams(), Map.class);</span><br><span class="line">        payResult.setTradeNo(map.get(&quot;trade_no&quot;));</span><br><span class="line">        return payResult;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3-创建策略工厂"><a href="#3-创建策略工厂" class="headerlink" title="3.创建策略工厂"></a>3.创建策略工厂</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">public class RefundStrategyFactory &#123;</span><br><span class="line"></span><br><span class="line">    private static  Map&lt;Integer, RefundStrategy&gt;  originalMap= new HashMap&lt;&gt;();</span><br><span class="line">    private static  Map&lt;Integer, RefundStrategy&gt; unOriginalMap = new HashMap&lt;&gt;();</span><br><span class="line">    //原路退款</span><br><span class="line">    static &#123;</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_CARD.getValue(), new WxPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_H5.getValue(), new WxPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY.getValue(), new AliPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY_H5.getValue(), new AliPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.JHPAY.getValue(), new JuhePayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_GZH.getValue(), new WxPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.PayType.UNION_PAY.getValue(), new UnionPayRefundStrategy());</span><br><span class="line">        originalMap.put(ReceptionPaymentDict.PayType.BEST_PAY.getValue(), new BestPayRefundStrategy());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    //手工退款</span><br><span class="line">    static &#123;</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.JHPAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.PayType.CASH.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.COMPANY_TRANSFER.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.SZ_ICBC.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.OTHER.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_CARD.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.NB_ICBC.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.CQ_ICBC.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.GZ_ICBC.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.PayType.POS.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.PayType.BEST_PAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_CARD.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_H5.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.ALIPAY_H5.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.JHPAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.RefundPayType.WXPAY_GZH.getValue(), new OtherPayRefundStrategy());</span><br><span class="line">        unOriginalMap.put(ReceptionPaymentDict.PayType.UNION_PAY.getValue(), new OtherPayRefundStrategy());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private RefundStrategyFactory() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   public static RefundStrategy getPayRefundStrategy(Integer key, Boolean original) &#123;</span><br><span class="line">        if (original) &#123;</span><br><span class="line">            return  originalMap.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">       return  unOriginalMap.get(key);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.创建上下文请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class PayRefundContext &#123;</span><br><span class="line"></span><br><span class="line">    @Resource</span><br><span class="line">    private RefundStrategy payRefundStrategy;</span><br><span class="line"></span><br><span class="line">    public PayRefundContext(RefundStrategy payRefundStrategy) &#123;</span><br><span class="line">        this.payRefundStrategy = payRefundStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public PayResult executePayRefundStrategy(String tradeNo, String refundNo,String orderNo, String thirdpartPayNo, String totalAmount, String refundAmount, String refundReason) &#123;</span><br><span class="line">       return payRefundStrategy.doPayRefund(tradeNo, refundNo, orderNo, thirdpartPayNo, totalAmount, refundAmount, refundReason);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-测试类"><a href="#5-测试类" class="headerlink" title="5.测试类"></a>5.测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void executePayRefundStrategy() &#123;</span><br><span class="line"></span><br><span class="line">      PayRefundContext payRefundContext = new PayRefundContext(RefundStrategyFactory.getPayRefundStrategy(18, true));</span><br><span class="line">      PayResult payResult = payRefundContext.executePayRefundStrategy(</span><br><span class="line">              &quot;1111&quot;,&quot;1111&quot;,&quot;1111&quot;, &quot;1111&quot;,&quot;111&quot;,&quot;111&quot;,&quot;1111&quot;</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;优雅解决大量if判断&quot;&gt;&lt;a href=&quot;#优雅解决大量if判断&quot; class=&quot;headerlink&quot; title=&quot;优雅解决大量if判断&quot;&gt;&lt;/a&gt;优雅解决大量if判断&lt;/h1&gt;&lt;h2 id=&quot;一：前言&quot;&gt;&lt;a href=&quot;#一：前言&quot; class=&quot;head
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java8日期操作</title>
    <link href="http://yoursite.com/2019/06/12/Java8%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/06/12/Java8日期时间操作/</id>
    <published>2019-06-12T08:16:06.443Z</published>
    <updated>2019-06-12T08:16:06.440Z</updated>
    
    <content type="html"><![CDATA[<p>Java8日期时间操作</p><h2 id="一：简介"><a href="#一：简介" class="headerlink" title="一：简介"></a><strong>一：简介</strong></h2><p>在java8之前 日期时间的API一直被开发者诟病，包括：Java.util.Date是可变类型SimpleDateFormat非线程安全等问题。故此，Java8引入了一套全新的日期时间处理API，新的API基于ISO标准日历系统。</p><h2 id="二-Java-util-Date不推荐使用"><a href="#二-Java-util-Date不推荐使用" class="headerlink" title="二:Java.util.Date不推荐使用"></a>二:Java.util.Date不推荐使用</h2><p>Calendar类虽然有所改进，但仍有很多需要改进的地方，所以对于严肃的日期/时间工作，每个人都建议使用Joda-Time. Java 8带来了由JSR-310定义的Joda-Time启发的新java.time.* package，旧的日期/日历类。<br>除了这个一般的缺陷(其中包括缺少一个时区组件以及在DateFormat中更好地处理日期格式化和无法使用非公历日历表示)的问题，有一些具体的问题，真的伤害Date类，包括年份与公元年年份偏移量为1900的事实。</p><p>日历有自己的问题，但即使早在JDK 1.1，显然java.util.Date不会削减它。即使日历是可以说是最差的JDK API，它已经采取到版本7尝试解决它。</p><h2 id="三：Java8初识时间日期"><a href="#三：Java8初识时间日期" class="headerlink" title="三：Java8初识时间日期"></a>三：Java8初识时间日期</h2><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p><code>//Clock时钟        Clock clock = Clock.systemDefaultZone();        long millis = clock.millis();        //获取指定时间点 用Instant         Instant instant = clock.instant();        //也可以取Date        Date legacyDate = Date.from(instant);</code></p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p><code>//在新API中时区使用ZoneId来表示。        ZoneId.getAvailableZoneIds();        ZoneId zoneId1 = ZoneId.of(&quot;Europe/Berlin&quot;);        ZoneId zoneId2 = ZoneId.of(&quot;Brazil/East&quot;);        System.out.println(zoneId1.getRules());</code></p><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><p><code>/LocalTime 本地时间        LocalTime localTime = LocalTime.now(zoneId1);        LocalTime localTime1 = LocalTime.now(zoneId2);        long hours = ChronoUnit.HOURS.between(localTime1,localTime);        System.out.println(hours);</code>      </p><h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><p><code>//LocalTime 提供了多种工厂方法来简化对象的创建，包括解析时间字符串。        LocalTime localTime2= LocalTime.of(23, 59, 59);        System.out.println(localTime);// 23:59:59        DateTimeFormatter germanFormatte = DateTimeFormatter.ofLocalizedTime(FormatStyle.SHORT).withLocale(Locale.GERMAN);        String leetTime = localTime2.format(germanFormatte).toString();        System.out.println(leetTime);</code></p><h2 id="四：相关API说明"><a href="#四：相关API说明" class="headerlink" title="四：相关API说明"></a>四：相关API说明</h2><p>  == nstant         时间戳<br>Duration        持续时间、时间差<br>LocalDate       只包含日期，比如：2018-09-24<br>LocalTime       只包含时间，比如：10:32:10<br>LocalDateTime   包含日期和时间，比如：2018-09-24 10:32:10<br>Peroid          时间段<br>ZoneOffset      时区偏移量，比如：+8:00<br>ZonedDateTime   带时区的日期时间<br>Clock           时钟，可用于获取当前时间戳</p><h1 id="java-time-format-DateTimeFormatter-时间格式化类"><a href="#java-time-format-DateTimeFormatter-时间格式化类" class="headerlink" title="java.time.format.DateTimeFormatter      时间格式化类     "></a>java.time.format.DateTimeFormatter      时间格式化类     </h1><h3 id="五：拓展"><a href="#五：拓展" class="headerlink" title="五：拓展"></a>五：拓展</h3><p><a href>  https://docs.oracle.com/javase/8/docs/api/  </a>        </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java8日期时间操作&lt;/p&gt;
&lt;h2 id=&quot;一：简介&quot;&gt;&lt;a href=&quot;#一：简介&quot; class=&quot;headerlink&quot; title=&quot;一：简介&quot;&gt;&lt;/a&gt;&lt;strong&gt;一：简介&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在java8之前 日期时间的API一直被开发者诟病，
      
    
    </summary>
    
      <category term="JDK8新特性" scheme="http://yoursite.com/categories/JDK8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="jdk8" scheme="http://yoursite.com/tags/jdk8/"/>
    
  </entry>
  
  <entry>
    <title>java11 --HttpClient</title>
    <link href="http://yoursite.com/2019/06/12/JDK11%E6%96%B0%E7%89%B9%E6%80%A7%20-httpClient/"/>
    <id>http://yoursite.com/2019/06/12/JDK11新特性 -httpClient/</id>
    <published>2019-06-12T08:14:56.972Z</published>
    <updated>2019-06-12T08:14:56.968Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="JDK11新特性-–httpClient"><a href="#JDK11新特性-–httpClient" class="headerlink" title="JDK11新特性 –httpClient"></a>JDK11新特性 –httpClient</h1><h2 id="一-HttpURLConnenction目前存在的问题"><a href="#一-HttpURLConnenction目前存在的问题" class="headerlink" title="一:HttpURLConnenction目前存在的问题"></a>一:HttpURLConnenction目前存在的问题</h2><p>1.其基类 URLConnection 当初是设计为支持多协议，但其中大多已经成为非主流（ftp, gopher…）<br>2.API 的设计早于 HTTP/1.1，过度抽象<br>3.难以使用，存在许多没有文档化的行为<br>4.它只支持阻塞模式（每个请求 / 响应占用一个线程）</p><h2 id="二-HttpClient简介"><a href="#二-HttpClient简介" class="headerlink" title="二: HttpClient简介"></a>二: HttpClient简介</h2><p>httpclient是Apache Jakarta common下的子项目，用来提供高效的、最新的、更能丰富的支持http协议的客户端编程工具包，并且它支持http协议最新的版本和建议。httpclient已经应用在很多项目中，比如Apache Jakarta上很著名的两个开源项目cactus和httplunit都使用了httpclient。</p><h2 id="三-HttpClient特性"><a href="#三-HttpClient特性" class="headerlink" title="三:HttpClient特性"></a>三:HttpClient特性</h2><p>1.以可扩展的面向对象的结构实现了HTTP全部的方法（GET、POST、put、delete、head、options、trace）。</p><p>2.支持HTTPS协议。</p><p>3.通过HTTP代理建立透明的连接。<br>4.连接管理器支持多线程应用。支持设置最大连接数，同事支持设置每个主机的最大连接数，发现并关闭过期的连接。</p><p>5.自动处理Set-Cookie中的Cookie。</p><p>6.插件式的自定义Cookie策略。</p><p>7.request的输出流可以避免流中内容直接缓冲到socket服务器。</p><p>8.Response的输入流可以有效的从socket服务器直接读取相应内容</p><h2 id="三-使用方法"><a href="#三-使用方法" class="headerlink" title="三:使用方法"></a>三:使用方法</h2><p>使用HttpClient发送请求、接收响应很简单，一般需要如下几步即可。<br>1、创建httpclient对象。<br>2、创建请求方法的实例，并制定请求url。如果需要发送get请求，创建httpclient对象；如果需要发送post请求，创建httpPOST对象。<br>3、如果需要发送请求参数，可调用httpget、httpPost共同的setparams(HetpParams params)方法来添加请求参数；对于HttpPost对象而言，也可调用setEntity(HttpEntity entity)方法来设置请求参数。<br>4、调用HttpClient对象的execute(HttpUriRequest request)发送请求，该方法返回一个HttpResponse。<br>5、调用HttpResponse的getAllHeaders()、getHeaders(String name)等方法可获取服务器的响应头；调用HttpResponse的getEntity()方法可获取HttpEntity对象，该对象包装了服务器的响应内容。程序可通过该对象获取服务器的响应内容。<br>6、释放连接。无论执行方法是否成功，都必须释放连接</p><h2 id="四-代码实例"><a href="#四-代码实例" class="headerlink" title="四:代码实例"></a>四:代码实例</h2><h3 id="实例1-同步get请求"><a href="#实例1-同步get请求" class="headerlink" title="实例1:同步get请求"></a>实例1:同步get请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public void syncGet() throws InterruptedException, IOException &#123;</span><br><span class="line"></span><br><span class="line">    HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">    HttpRequest request = HttpRequest.newBuilder().uri(URI.create(&quot;https://www.baidu.com&quot;)).build();</span><br><span class="line">    HttpResponse&lt;String&gt; response =</span><br><span class="line">            client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line"></span><br><span class="line">    System.out.println(response.body());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例2-异步Get-请求"><a href="#实例2-异步Get-请求" class="headerlink" title="实例2:异步Get 请求"></a>实例2:异步Get 请求</h3><figure class="highlight plain"><figcaption><span>void asyncGet() throws IOException, InterruptedException, ExecutionException &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">    HttpRequest request = HttpRequest.newBuilder().uri(URI.create(&quot;https://www.baidu.com&quot;)).build();</span><br><span class="line">    CompletableFuture&lt;String&gt; result = client.sendAsync(request, HttpResponse.BodyHandlers.ofString()).thenApply(HttpResponse::body);</span><br><span class="line">    System.out.println(result.get());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例3-Post请求"><a href="#实例3-Post请求" class="headerlink" title="实例3 Post请求"></a>实例3 Post请求</h3><figure class="highlight plain"><figcaption><span>void testPostForm() throws IOException, InterruptedException &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    HttpClient client = HttpClient.newBuilder().build();</span><br><span class="line">    HttpRequest request = HttpRequest.newBuilder()</span><br><span class="line">            .uri(URI.create(&quot;http://www.w3school.com.cn/demo/demo_form.asp&quot;))</span><br><span class="line">            .header(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;)</span><br><span class="line">            .POST(HttpRequest.BodyPublishers.ofString(&quot;name1=value1&amp;name2=value2&quot;))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line">    System.out.println(response.statusCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实例4-JSON传参-header指定内容是表单类型，然后通过BodyPublishers-ofString传递表单数据，需要自己构建表单参数"><a href="#实例4-JSON传参-header指定内容是表单类型，然后通过BodyPublishers-ofString传递表单数据，需要自己构建表单参数" class="headerlink" title="实例4:JSON传参 header指定内容是表单类型，然后通过BodyPublishers.ofString传递表单数据，需要自己构建表单参数"></a>实例4:JSON传参 header指定内容是表单类型，然后通过BodyPublishers.ofString传递表单数据，需要自己构建表单参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">  ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">      StockDto dto = new StockDto();</span><br><span class="line">      dto.setName(&quot;hj&quot;);</span><br><span class="line">      dto.setSymbol(&quot;hj&quot;);</span><br><span class="line">      dto.setType(StockDto.StockType.SH);</span><br><span class="line">      String requestBody = objectMapper</span><br><span class="line">        .writerWithDefaultPrettyPrinter()</span><br><span class="line">        .writeValueAsString(dto);</span><br><span class="line">      </span><br><span class="line">      HttpRequest request = HttpRequest.newBuilder(URI.create(&quot;http://localhost:8080/json/demo&quot;))</span><br><span class="line">        .header(&quot;Content-Type&quot;, &quot;application/json&quot;)</span><br><span class="line">        .POST(HttpRequest.BodyPublishers.ofString(requestBody))</span><br><span class="line">        .build();</span><br><span class="line">      </span><br><span class="line">      CompletableFuture&lt;StockDto&gt; result = HttpClient.newHttpClient()</span><br><span class="line">        .sendAsync(request, HttpResponse.BodyHandlers.ofString())</span><br><span class="line">        .thenApply(HttpResponse::body)</span><br><span class="line">        .thenApply(body -&gt; &#123;</span><br><span class="line">         try &#123;</span><br><span class="line">          return objectMapper.readValue(body,StockDto.class);</span><br><span class="line">         &#125; catch (IOException e) &#123;</span><br><span class="line">          return new StockDto();</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;);StockDto</span><br><span class="line">System.out.println(result.get());</span><br></pre></td></tr></table></figure><h3 id="实例5-并发请求"><a href="#实例5-并发请求" class="headerlink" title="实例5:并发请求"></a>实例5:并发请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//endAsync方法返回的是CompletableFuture，可以方便地进行转换、组合等操作</span><br><span class="line">//这里使用CompletableFuture.allOf组合在一起，最后调用join等待所有future完成</span><br><span class="line">public void testConcurrentRequests()&#123;</span><br><span class="line">        HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">        List&lt;String&gt; urls = List.of(&quot;http://www.baidu.com&quot;,&quot;http://www.alibaba.com/&quot;,&quot;http://www.tencent.com&quot;);</span><br><span class="line">        List&lt;HttpRequest&gt; requests = urls.stream()</span><br><span class="line">                .map(url -&gt; HttpRequest.newBuilder(URI.create(url)))</span><br><span class="line">                .map(reqBuilder -&gt; reqBuilder.build())</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        List&lt;CompletableFuture&lt;HttpResponse&lt;String&gt;&gt;&gt; futures = requests.stream()</span><br><span class="line">                .map(request -&gt; client.sendAsync(request, HttpResponse.BodyHandlers.ofString()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        futures.stream()</span><br><span class="line">                .forEach(e -&gt; e.whenComplete((resp,err) -&gt; &#123;</span><br><span class="line">                    if(err != null)&#123;</span><br><span class="line">                        err.printStackTrace();</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        System.out.println(resp.body());</span><br><span class="line">                        System.out.println(resp.statusCode());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;));</span><br><span class="line">        CompletableFuture.allOf(futures</span><br><span class="line">                .toArray(CompletableFuture&lt;?&gt;[]::new))</span><br><span class="line">                .join();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="六-总结"><a href="#六-总结" class="headerlink" title="六:总结"></a>六:总结</h2><h3 id="HttpClient中常用到的类"><a href="#HttpClient中常用到的类" class="headerlink" title="HttpClient中常用到的类"></a>HttpClient中常用到的类</h3><p><em>HttpClient<br>         |– DefaultHttpClient<br>                   构造方法：     DefaultHttpClient<br>                   主要方法：     HttpResponse  execute(HttpUriRequest request)<br>HttpUriRequest<br>         |– HttpGet<br>                   构造方法：     HttpGet()<br>                                               HttpGet(String uri)<br>         |– HttpPost<br>                   构造方法：     HttpPost(String uri)<br>                   主要方法：     void setEntity(HttpEntity entity)<br>HttpResponse<br>         主要方法：<br>                   StatusLine getStatusLine()<br>                   Header[] getAllHeaders();<br>                   HttpEntity getEntity();<br>HttpEntity<br>         主要方法：<br>                   InputStream getContent();<br>                   long getContentLength();<br>                   Header getContentType();<br>         |– UrlEncodedFormEntity<br>                   构造方法：UrlEncodedFormEntity(List&lt;? extends NameValuePair&gt; params)<br>                                               //用于向请求对象中写入请求实体（包含请求参数（NameValuePair））<br>EntityUtils<br>         public static byte[] toByteArray(HttpEntity entity)<br>         public static String toString(HttpEntity entity)<br>         public static String toString(HttpEntity entity , String encoding)<br>StatusLine<br>         int getStatusCode()<br>HttpStatus<br>         SC_OK   SC_NOT_FOUND<br>Header<br>         String getName()<br>         String getValue()<br>NameValuePair<br>         String getName()<br>         String getValue()<br>         |– BasicNameValuePair<br>                   构造方法：BasicNameValuePair(String name , String value)</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;JDK11新特性-–httpClient&quot;&gt;&lt;a href=&quot;#JDK11新特性-–httpClient&quot; class=&quot;headerlink&quot; title=&quot;JDK11新特性 –httpClient&quot;&gt;&lt;/a&gt;JDK11新特性 –httpClient&lt;
      
    
    </summary>
    
      <category term="jdk11新特性" scheme="http://yoursite.com/categories/jdk11%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/06/11/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/06/11/单例模型/</id>
    <published>2019-06-11T12:49:12.874Z</published>
    <updated>2019-06-11T12:49:12.868Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模型"><a href="#单例模型" class="headerlink" title="单例模型"></a>单例模型</h1><h2 id="定义：保证一个类仅有一个实例，并且提供一个全局访问点"><a href="#定义：保证一个类仅有一个实例，并且提供一个全局访问点" class="headerlink" title="定义：保证一个类仅有一个实例，并且提供一个全局访问点"></a><strong>定义：</strong>保证一个类仅有一个实例，并且提供一个全局访问点</h2><h2 id="类型：创建型"><a href="#类型：创建型" class="headerlink" title="类型：创建型"></a>类型：创建型</h2><hr><h2 id="单例-使用场景"><a href="#单例-使用场景" class="headerlink" title="单例-使用场景"></a>单例-使用场景</h2><p>​        想确保任何情况下都绝对只有一个实例</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>在内存里只有一个实例，减少了内存开销</p><p> 可以避免对资源的多重占用</p><p> 设置全局访问点，严格控制访问</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>没有接口，需要扩展代码</p><h2 id="单例-懒汉型"><a href="#单例-懒汉型" class="headerlink" title="单例-懒汉型"></a>单例-懒汉型</h2><p><img src="/%E7%AE%80%E4%B9%A6%E7%B4%A0%E6%9D%90/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9E%8B/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%9E%8B/%E6%87%92%E6%B1%89test.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单例模型&quot;&gt;&lt;a href=&quot;#单例模型&quot; class=&quot;headerlink&quot; title=&quot;单例模型&quot;&gt;&lt;/a&gt;单例模型&lt;/h1&gt;&lt;h2 id=&quot;定义：保证一个类仅有一个实例，并且提供一个全局访问点&quot;&gt;&lt;a href=&quot;#定义：保证一个类仅有一个实例，并且提供
      
    
    </summary>
    
    
  </entry>
  
</feed>
